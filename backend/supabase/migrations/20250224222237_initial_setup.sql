SET
statement_timeout = 0;
SET
lock_timeout = 0;
SET
idle_in_transaction_session_timeout = 0;
SET
client_encoding = 'UTF8';
SET
standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET
check_function_bodies = false;
SET
xmloption = content;
SET
client_min_messages = warning;
SET
row_security = off;


CREATE
EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE
EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT
ON SCHEMA "public" IS 'standard public schema';



CREATE
EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE
EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE
EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE
EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE
EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE
EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE
OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
insert into public.users (id, email, name, username, profile_pic, bio, location)
values (new.id,
        new.email,
        new.raw_user_meta_data ->>'name',
        new.raw_user_meta_data ->>'username',
        new.raw_user_meta_data ->>'profile_pic',
        new.raw_user_meta_data ->>'bio',
        new.raw_user_meta_data - > 'location');
return new;
end;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE
OR REPLACE FUNCTION "public"."handle_user_deletion"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
DELETE
FROM auth.users
WHERE id = OLD.id;
RETURN OLD;
END;
$$;


ALTER FUNCTION "public"."handle_user_deletion"() OWNER TO "postgres";


CREATE
OR REPLACE FUNCTION "public"."handle_user_update"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
insert into public.users (id, email, name, username, profile_pic, bio, location)
values (new.id,
        new.email,
        new.raw_user_meta_data ->> 'name',
        new.raw_user_meta_data ->> 'username',
        new.raw_user_meta_data ->> 'profile_pic',
        new.raw_user_meta_data ->> 'bio',
        new.raw_user_meta_data - > 'location') on conflict (id)
    do
update set
    email = excluded.email,
    name = excluded.name,
    username = excluded.username,
    profile_pic = excluded.profile_pic,
    bio = excluded.bio,
    location = excluded.location;

return new;
end;
$$;


ALTER FUNCTION "public"."handle_user_update"() OWNER TO "postgres";

SET
default_tablespace = '';

SET
default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."board_queries"
(
    "id"
    bigint
    NOT
    NULL,
    "created_at"
    timestamp
    without
    time
    zone
    DEFAULT
    "now"
(
) NOT NULL,
    "destination" "text" NOT NULL,
    "days" bigint NOT NULL,
    "board_id" bigint NOT NULL
    );


ALTER TABLE "public"."board_queries" OWNER TO "postgres";


COMMENT
ON TABLE "public"."board_queries" IS 'Queries sent by users to generate a travel board';



ALTER TABLE "public"."board_queries" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."recommendation_queries_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."travel_boards"
(
    "created_at"
    timestamp
    without
    time
    zone
    DEFAULT
    "now"
(
) NOT NULL,
    "plan" "jsonb" NOT NULL,
    "images" "jsonb" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"
(
) NOT NULL,
    "id" bigint NOT NULL,
    "destination_image" "jsonb" NOT NULL,
    "sight_recommendations" "jsonb" NOT NULL
    );


ALTER TABLE "public"."travel_boards" OWNER TO "postgres";


COMMENT
ON TABLE "public"."travel_boards" IS 'Table of generated itineraries / travel boards';



ALTER TABLE "public"."travel_boards" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."travel_boards_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."users"
(
    "id"
    "uuid"
    NOT
    NULL,
    "created_at"
    timestamp
    without
    time
    zone
    DEFAULT
    "now"
(
) NOT NULL,
    "email" "text" NOT NULL,
    "username" "text" NOT NULL,
    "bio" "text" DEFAULT ''::"text",
    "follower_count" bigint DEFAULT '0'::bigint NOT NULL,
    "following_count" bigint DEFAULT '0'::bigint NOT NULL,
    "location" "jsonb" DEFAULT '{}'::"jsonb",
    "name" "text" NOT NULL,
    "post_count" bigint DEFAULT '0'::bigint NOT NULL,
    "profile_pic" "text" DEFAULT ''::"text"
    );


ALTER TABLE "public"."users" OWNER TO "postgres";


COMMENT
ON TABLE "public"."users" IS 'Users table';



ALTER TABLE ONLY "public"."board_queries"
    ADD CONSTRAINT "board_queries_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."board_queries"
    ADD CONSTRAINT "board_queries_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."travel_boards"
    ADD CONSTRAINT "travel_boards_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_username_key" UNIQUE ("username");



CREATE
OR REPLACE TRIGGER "on_public_user_deleted" AFTER DELETE
ON "public"."users" FOR EACH ROW EXECUTE FUNCTION "public"."handle_user_deletion"();



ALTER TABLE ONLY "public"."board_queries"
    ADD CONSTRAINT "board_queries_board_id_fkey" FOREIGN KEY ("board_id") REFERENCES "public"."travel_boards"("id") ON
UPDATE CASCADE
ON
DELETE
CASCADE;



ALTER TABLE ONLY "public"."travel_boards"
    ADD CONSTRAINT "travel_boards_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON
UPDATE CASCADE
ON
DELETE
CASCADE;



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON
UPDATE CASCADE
ON
DELETE
CASCADE;



CREATE
POLICY "Enable delete for users based on user_id" ON "public"."travel_boards" FOR DELETE
USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE
POLICY "Enable insert for authenticated users only" ON "public"."board_queries" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE
POLICY "Enable insert for users based on user_id" ON "public"."travel_boards" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE
POLICY "Enable read access for all users" ON "public"."board_queries" FOR
SELECT USING (true);



CREATE
POLICY "Enable users to view their own data only" ON "public"."travel_boards" FOR
SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



ALTER TABLE "public"."board_queries" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."travel_boards" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;



ALTER
PUBLICATION "supabase_realtime" OWNER TO "postgres";





GRANT USAGE ON SCHEMA
"public" TO "postgres";
GRANT USAGE ON SCHEMA
"public" TO "anon";
GRANT USAGE ON SCHEMA
"public" TO "authenticated";
GRANT USAGE ON SCHEMA
"public" TO "service_role";


























































































































































































GRANT ALL
ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL
ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL
ON FUNCTION "public"."handle_new_user"() TO "service_role";



GRANT ALL
ON FUNCTION "public"."handle_user_deletion"() TO "anon";
GRANT ALL
ON FUNCTION "public"."handle_user_deletion"() TO "authenticated";
GRANT ALL
ON FUNCTION "public"."handle_user_deletion"() TO "service_role";



GRANT ALL
ON FUNCTION "public"."handle_user_update"() TO "anon";
GRANT ALL
ON FUNCTION "public"."handle_user_update"() TO "authenticated";
GRANT ALL
ON FUNCTION "public"."handle_user_update"() TO "service_role";


















GRANT ALL
ON TABLE "public"."board_queries" TO "anon";
GRANT ALL
ON TABLE "public"."board_queries" TO "authenticated";
GRANT ALL
ON TABLE "public"."board_queries" TO "service_role";



GRANT ALL
ON SEQUENCE "public"."recommendation_queries_id_seq" TO "anon";
GRANT ALL
ON SEQUENCE "public"."recommendation_queries_id_seq" TO "authenticated";
GRANT ALL
ON SEQUENCE "public"."recommendation_queries_id_seq" TO "service_role";



GRANT ALL
ON TABLE "public"."travel_boards" TO "anon";
GRANT ALL
ON TABLE "public"."travel_boards" TO "authenticated";
GRANT ALL
ON TABLE "public"."travel_boards" TO "service_role";



GRANT ALL
ON SEQUENCE "public"."travel_boards_id_seq" TO "anon";
GRANT ALL
ON SEQUENCE "public"."travel_boards_id_seq" TO "authenticated";
GRANT ALL
ON SEQUENCE "public"."travel_boards_id_seq" TO "service_role";



GRANT ALL
ON TABLE "public"."users" TO "anon";
GRANT ALL
ON TABLE "public"."users" TO "authenticated";
GRANT ALL
ON TABLE "public"."users" TO "service_role";



ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER
DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET
ALL;

--
-- Dumped schema changes for auth and storage
--

